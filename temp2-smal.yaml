blueprint:
  name: SMAL â€“ Smart Motion-Activated Lighting
  description: >
    # Introduction
     
    The "Smart Motion-Activated Lighting" blueprint creates an automation that turns on devices or scenes when motion is detected. It has several optional features that allow users to customize the automation's behavior based on their needs. 
     

    ## Optional Features
    Some examples of how the optional features can be used include:
     - Defining different devices for different times of day (e.g., bright devices for daytime and dim devices for nighttime)
     - Activating an ambient device during a specified time frame (e.g., a relaxing light from 6 pm to 10 pm)
     - Only running the automation if certain entities are in a desired state (e.g., only running if the house is unoccupied)
     - Setting a "no motion blocker" to prevent the automation from running when a certain boolean is active (e.g., a "vacation" boolean that can be turned on when the user is away)
     
     
    ## Capabilities
     - Triggers on motion (can be triggered by anything that switches between "on" and "off")
     - Wait time for turning off devices
     - Optional feature to only run if certain entities are in a desired state
     - Optional feature to check sun elevation
     - Optional feature to define 4 different devices for different times of day
     - Optional feature for an ambient device with a specified time frame
     - Optional feature for a default device when motion stops
     - Optional "no motion blocker" with user-specified state
     - Transition time for devices to turn off
     - Inputs for motion sensor entity, target entity

    
  domain: automation
  source_url: https://gist.github.com/networkingcat/a1876d7e706e07c8bdcf974113940fb8
  input:
    motion_entity:
      name: Motion Sensor
      description: Motion Sensor or a group with Motion Sensors (But can be anything switching between "on" and "off")
      selector:
        entity:
    target_entity:
      name: Target Device or Scene
      description: Device or scene to be controlled when motion is detected.
      selector:
        target:
          entity:
#added from other blueprint
    illuminance_sensor:
      name: (OPTIONAL) Illuminance sensor
      description: This sensor will be used to determine the illumination.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_cutoff:
      name: (OPTIONAL) Illuminance cutoff value
      description: This input_number will be used to compare to the current illumination to determine if it is low.
      default:
      selector:
        entity:
          domain: input_number
#till here
    no_motion_wait:
      name: Wait time
      description: Time to leave the device on after the last motion is detected.
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds            
    automation_blocker:
      name: Automation Blocker (Optional)
      description: Only run if this boolean is in the desired state (see the next input)
      default:
      selector:
        entity:
    automation_blocker_boolean:
      name: Automation Blocker Chooser (Optional)
      description: Desired state of the automation blocker, choose on for on and off for off
      default: false
      selector:
        boolean: 
    no_motion_blocker:
      name: No Motion Blocker (Optional)
      description: No motion sequence is not run if this boolean is in the desired state (see the next input)
      default:
      selector:
        entity:
    no_motion_blocker_boolean:
      name: No Motion Chooser (Optional)
      description: Desired state of no motion blocker, choose on for on and off for off
      default: false
      selector:
        boolean:         
    elevation_check:
      name: Sun elevation check (Optional)
      description: This is the angle between the sun and the horizon. Negative values mean the sun is BELOW the horizon.
      default: none
      selector:
        number:
          min: -90
          max: 90
          unit_of_measurement: degrees
    device_ambient:
      name: Ambient Device (Optional)
      description: Device for ambient state. Will be activated when no motion is detected.
      selector:
        target:
          entity:
    time_device_ambient_start:
      name: Ambient time frame start (Optional)
      description: Time from which on the ambient device will be activated
      default: "00:00:00"
      selector:
        time:
    time_device_ambient_end:
      name: Ambient time frame end (Optional)
      description: Time from which on the ambient device will be not activated
      default: "00:00:00"
      selector:
        time:
    device_morning:
      name: Device for the morning (Optional)
      selector:
        target:
          entity:
    time_device_morning:
      name: Time for the morning device (Optional)
      description: A time input that defines the time from which on the device will be activated if motion is detected.
      default: "00:00:00"
      selector:
        time:
    device_day:
      name: Device for the bright day (Optional)
      selector:
        target:
          entity:
    time_device_day:
      name: Time for the day device (Optional)
      description: A time input that defines the time from which on the device will be activated if motion is detected.
      default: "08:00:00"
      selector:
        time:
    device_evening:
      name: Device for the evening (Optional)
      selector:
        target:
          entity:
    time_device_evening:
      name: Time for the evening device (Optional)
      description: A time input that defines the time from which on the device will be activated if motion is detected.
      default: "21:00:00"
      selector:
        time:
    device_night:
      name: Device for the dark night (Optional)
      selector:
        target:
          entity:
    time_device_night:
      name: Time for the night device (Optional)
      description: A time input that defines the time from which on the device will be activated if motion is detected.
      default: "23:00:00"
      selector:
        time:
    device_no_motion:
      name: Default device for no motion (Optional)
      selector:
        target:
          entity:
    transition_time:
      name: Device Transition
      description: Time to transition devices
      default: 0
      selector:
        number:
          min: 0
          max: 600
          unit_of_measurement: seconds


mode: restart
max_exceeded: silent

variables:
#added from other blueprint
  illuminance_currently: !input illuminance_sensor
  illuminance_cutoff: !input illuminance_cutoff
  transition_time: !input transition_time
#till here
  device_ambient: !input device_ambient
  device_morning: !input device_morning
  device_day: !input device_day
  device_evening: !input device_evening
  device_night: !input device_night
  automation_blocker: !input automation_blocker
  automation_blocker_boolean : !input automation_blocker_boolean
  no_motion_blocker: !input no_motion_blocker
  no_motion_blocker_boolean: !input no_motion_blocker_boolean
  elevation_check: !input elevation_check
  device_no_motion: !input device_no_motion
  motion_entity: !input motion_entity

trigger:
  - platform: state
    entity_id: !input motion_entity
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input motion_entity
    from: "on"
    to: "off"
    for: !input no_motion_wait
      

# All Conditions must be true
condition:
   # Check if automation blocker exists or is in the desired state, otherwise do not run
  - condition: or
    conditions:
      - "{{ automation_blocker == none }}"
      - "{{ automation_blocker_boolean and states[automation_blocker].state == 'on' }}"
      - "{{ not automation_blocker_boolean and states[automation_blocker].state == 'off' }}"
  # Check if elevation input exists or is below the desired value, otherwise do not run
  - condition: template
    value_template: "{{ (elevation_check == none) or (state_attr('sun.sun','elevation') <= elevation_check | float(90)) }}"

action:
  - choose:
      # Trigger to state == "on"
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}" 
          #added from other blueprint
          - condition: template
            value_template: "{{ (illuminance_currently == none) or (illuminance_cutoff == none) or (states[illuminance_currently].state | int < states[illuminance_cutoff].state | int) }}"
          #till here
        sequence:
          - choose:
              # Morning Device
              - conditions:
                  - "{{ device_morning is defined }}"
                  - condition: time
                    after: !input time_device_morning
                    before: !input time_device_day
                sequence:
                  - service: homeassistant.turn_on
                    target: !input device_morning
              # Day Device              
              - conditions:
                  - "{{ device_day is defined }}"
                  - condition: time
                    after: !input time_device_day
                    before: !input time_device_evening
                sequence:
                  - service: homeassistant.turn_on
                    target: !input device_day
              # Evening Device              
              - conditions:
                  - "{{ device_evening is defined }}"
                  - condition: time
                    after: !input time_device_evening
                    before: !input time_device_night
                sequence:
                  - service: homeassistant.turn_on
                    target: !input device_evening
              # Night Device              
              - conditions:
                  - "{{ device_night is defined }}"
                  - condition: time
                    after: !input time_device_night
                    before: !input time_device_morning
                sequence:
                  - service: homeassistant.turn_on
                    target: !input device_night
            # If State -> "On" defaulting to turn the target on
            default:
              - service: homeassistant.turn_on
                target: !input target_entity
          # Trigger to state = "off"
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
          # Check if no motion blocker exists or is in the desired state, otherwise do not run any no motion action            
          - condition: or
            conditions:
              - "{{ no_motion_blocker == none }}"
              - "{{ no_motion_blocker_boolean and states[no_motion_blocker].state == 'on' }}"
              - "{{ not no_motion_blocker_boolean and states[no_motion_blocker].state == 'off' }}"
        sequence:          
          - choose:
              # Used if ambient device is defined and in the ambient device time frame
              - conditions:
                  - "{{ device_ambient is defined }}"
                  - condition: time
                    after: !input time_device_ambient_start
                    before: !input time_device_ambient_end
                sequence:
                  - service: homeassistant.turn_on
                    target: !input device_ambient
              # Used if default no motion device is defined
              - conditions:
                  - "{{ device_no_motion is defined }}"
                sequence:
                  - service: homeassistant.turn_on
                    target: !input device_no_motion
              # If State -> "off" default to turn the target off
            default:
              - service: homeassistant.turn_off
                target: !input target_entity
